---

- name: Install NFS client on all nodes
  apt: update_cache=yes name=nfs-common state=latest

- name: Add apt repository key for Kubernetes repo
  apt_key:
    url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
    state: present

- name: Install Kubernetes repo
  copy:
    dest: /etc/apt/sources.list.d/kubernetes.list
    content: |
      deb http://apt.kubernetes.io/ kubernetes-xenial main

- name: Install Docker and Kubernetes
  apt: update_cache=yes name={{ item }} state=latest
  with_items:
    - jq
    - docker.io
    - kubelet
    - kubeadm
    - kubectl
    - kubernetes-cni

- name: Initialise Kubernetes control plane components
  command: kubeadm init --api-advertise-addresses={{ kube_master_ip }}
  args:
    creates: /etc/kubernetes/kubelet.conf
  register: kubeadm_init
  when: inventory_hostname in groups['kube_masters']

- name: Update proxy-mode for proxy pods
  shell:
    kubectl -n kube-system get ds -l k8s-app=kube-proxy -o json | \
      jq '.items[0].spec.template.spec.containers[0].command |= .+ ["--proxy-mode=userspace"]' | \
      kubectl apply -f - && \
    kubectl -n kube-system delete pods -l k8s-app=kube-proxy
  when: use_userspace_proxy is defined and use_userspace_proxy and
        kubeadm_init|changed and inventory_hostname in groups['kube_masters']

- name: Install pod network
  command: kubectl apply -f https://git.io/weave-kube
  when: inventory_hostname in groups['kube_masters']

- name: Ensure kube-dns has started
  shell: kubectl get pods -l k8s-app=kube-dns -n kube-system -o json | jq '.items | map(.status.containerStatuses) | flatten | map(.ready) | all'
  register: result
  until: result.stdout == "true"
  retries: 30
  delay: 10
  when: inventory_hostname in groups['kube_masters']

- name: Get kubeadm token
  shell: >
    kubectl -n kube-system get secret clusterinfo -o json | \
      jq -r '.data["token-map.json"]' | \
      base64 -d | \
      jq -r 'to_entries[0] | .key + "." + .value'
  register: kubeadm_token
  when: inventory_hostname in groups['kube_masters']

- name: Set kubeadm_token fact (masters)
  set_fact:
    kubeadm_token: "{{ kubeadm_token.stdout }}"
  when: inventory_hostname in groups['kube_masters']

- name: Set kubeadm_token fact (nodes)
  set_fact:
    kubeadm_token: "{{ hostvars[groups['kube_masters'][0]].kubeadm_token }}"
  when: inventory_hostname in groups['kube_nodes']

- name: Join Kubernetes cluster (preflight checks skipped due to https://github.com/kubernetes/kubeadm/issues/6)
  command: kubeadm join --skip-preflight-checks --token={{ kubeadm_token }} {{ kube_master_ip }}
  args:
    creates: /etc/kubernetes/kubelet.conf
  when: inventory_hostname in groups['kube_nodes']

- name: Make local artifacts directory
  file: path={{ playbook_dir }}/.artifacts/{{ artifact_namespace }} state=directory
  delegate_to: 127.0.0.1

- name: Retrieve kubectl binary and Kubernetes admin config
  fetch:
    src: "{{ item.src }}"
    dest: "{{ playbook_dir }}/.artifacts/{{ artifact_namespace }}/{{ item.dest }}"
    flat: yes
  with_items:
    - { src: /usr/bin/kubectl, dest: kubectl }
    - { src: /etc/kubernetes/admin.conf, dest: kubernetes-admin.conf }
  when: inventory_hostname in groups['kube_masters']
