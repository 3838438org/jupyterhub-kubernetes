apiVersion: v1
kind: Service
metadata:
  name: jupyterhub
  labels:
    app: jupyterhub
    jupyterhub: hub-service
spec:
  ports:
    - protocol: TCP
      port: 8000
  selector:
    jupyterhub: hub-service
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: jupyterhub-config
  labels:
    app: jupyterhub
data:
  jupyterhub-config.py: |-
    import os

    c.JupyterHub.spawner_class = 'kubespawner.KubeSpawner'
    c.KubeSpawner.namespace = os.environ.get('POD_NAMESPACE', 'default')
    c.KubeSpawner.start_timeout = 60 * 5  # Upto 5 minutes, first pulls can be really slow
    c.KubeSpawner.hub_connect_ip = os.environ['JUPYTERHUB_SERVICE_HOST']
    c.KubeSpawner.hub_connect_port = int(os.environ['JUPYTERHUB_SERVICE_PORT'])
    c.KubeSpawner.singleuser_image_spec = '{{ singleuser_image }}'
    #Â Each user gets their own persistentVolumeClaim
    c.KubeSpawner.user_storage_capacity = '100Mi'
    c.KubeSpawner.user_storage_class = 'notebook-storage'
    c.KubeSpawner.volumes = [{
        'name' : 'notebook-volume',
        'persistentVolumeClaim' : {
            'claimName' : 'claim-{username}-{userid}',
        },
    }]
    c.KubeSpawner.volume_mounts = [{
        'name' : 'notebook-volume',
        'mountPath' : '/home/jovyan/work',
    }]

{% if jupyterhub_image_name == "jupyterhub-kubernetes-ceda-oauth" %}
    c.JupyterHub.authenticator_class = 'jupyterhub_ceda_auth.CedaOAuthenticator'
    c.CedaOAuthenticator.oauth_callback_url = 'https://{{ server_name }}{% if https_port %}:{{ https_port }}{% endif %}/hub/oauth_callback'
    c.CedaOAuthenticator.client_id = os.environ['CEDA_OAUTH_CLIENT_ID']
    c.CedaOAuthenticator.client_secret = os.environ['CEDA_OAUTH_CLIENT_SECRET']
{% else %}
    c.JupyterHub.authenticator_class = 'dummyauthenticator.DummyAuthenticator'
{% endif %}
    c.Authenticator.admin_users = {'mpryor'}
    c.JupyterHub.admin_access = True
---
{% if jupyterhub_image_name == "jupyterhub-kubernetes-ceda-oauth" %}
apiVersion: v1
kind: Secret
metadata:
  name: ceda-oauth-creds
  labels:
    app: jupyterhub
type: Opaque
data:
  client_id: {{ ceda_oauth_client_id|b64encode }}
  client_secret: {{ ceda_oauth_client_secret|b64encode }}
---
{% endif %}
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: jupyterhub
  labels:
    app: jupyterhub
    jupyterhub: hub-service
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: jupyterhub
        jupyterhub: hub-service
    spec:
      containers:
        - name: jupyterhub
          image: {{ jupyterhub_image }}
          command:
            - jupyterhub
            - --config
            - /srv/jupyterhub/conf/jupyterhub_config.py
            - --no-ssl
          env:
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
{% if jupyterhub_image_name == "jupyterhub-kubernetes-ceda-oauth" %}
            - name: CEDA_OAUTH_CLIENT_ID
              valueFrom:
                secretKeyRef:
                  name: ceda-oauth-creds
                  key: client_id
            - name: CEDA_OAUTH_CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: ceda-oauth-creds
                  key: client_secret
{% endif %}
          ports:
            - name: proxy
              containerPort: 8000
          volumeMounts:
            - name: config-volume
              mountPath: /srv/jupyterhub/conf/
      volumes:
        - name: config-volume
          configMap:
            name: jupyterhub-config
            items:
              - key: jupyterhub-config.py
                path: jupyterhub_config.py
