---
# Setup tasks for JupyterHub on Kubernetes

- name: Set jupyterhub_k8s_dir fact
  set_fact:
    jupyterhub_k8s_dir: "{{ playbook_dir }}/../jupyterhub_k8s"

- name: Install pip for system Python
  yum: name=python-pip state=latest

- name: Install docker-py
  pip: name=docker-py state=latest

- name: Include DockerHub credentials
  include_vars: file="{{ lookup('env', 'DOCKERHUB_CREDS_FILE')|default(playbook_dir + '/.dockerhub-credentials.yml', true) }}"
  when: kube_role == 'master' and build_jupyterhub_image

- name: Log in to DockerHub
  docker_login:
    username: "{{ dockerhub_username }}"
    password: "{{ dockerhub_password }}"
    email: "{{ dockerhub_email }}"
  when: kube_role == 'master' and build_jupyterhub_image

- name: Create docker_build directory
  file: path=/root/docker_build state=directory
  when: kube_role == 'master' and build_jupyterhub_image

- name: Copy Dockerfile to docker_build directory
  copy: src={{ jupyterhub_k8s_dir }}/Dockerfile dest=/root/docker_build/Dockerfile
  when: kube_role == 'master' and build_jupyterhub_image
  register: dockerfile

- name: Build Docker image for JupyterHub
  docker_image:
    name: "{{ jupyterhub_image_name }}"
    path: /root/docker_build
    state: present
    push: yes
  when: kube_role == 'master' and build_jupyterhub_image and dockerfile|changed

- name: Pre-pull jupyterhub/singleuser image onto nodes
  docker_image:
    name: "{{ singleuser_image_name }}"
  when: kube_role == 'node'

- name: Create certs directory
  file: path=/root/certs state=directory
  when: kube_role == 'master'

- name: Generate self-signed SSL certificate on master
  command: >
    openssl req -new -nodes -x509 -subj "{{ ssl_cert_subject }}" -days 3650
    -keyout /root/certs/cert.key -out /root/certs/cert.pem -extensions v3_ca
  args:
    creates: /root/certs/cert.pem
  when: kube_role == 'master' and use_self_signed_ssl_cert

- name: Retrieve self-signed SSL certificate from master
  slurp: src=/root/certs/cert.pem
  register: self_signed_cert
  when: kube_role == 'master' and use_self_signed_ssl_cert

- name: Retrieve self-signed SSL private key from master
  slurp: src=/root/certs/cert.key
  register: self_signed_key
  when: kube_role == 'master' and use_self_signed_ssl_cert

- name: Set SSL facts from self-signed cert
  set_fact:
    ssl_certificate: "{{ self_signed_cert.content|b64decode }}"
    ssl_private_key: "{{ self_signed_key.content|b64decode }}"
  when: kube_role == 'master' and use_self_signed_ssl_cert

- name: Create manifests directory
  file: path=/root/manifests state=directory
  when: kube_role == 'master'

- name: Copy manifest files
  template: src={{ jupyterhub_k8s_dir }}/{{ item }} dest=/root/manifests/{{ item }} mode="u=rw,g=,o="
  with_items:
    - nfs-notebook-storage.yml
    - hub-service.yml
    - nginx-proxy-nodeport.yml
    - nginx-proxy-deployment.yml
  when: kube_role == 'master'
